# -*- coding: utf-8 -*-
"""NM2025TMID03893_CITIZEN AI.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wc7zcmMaxArXPss99nl1G1xHQlLDZzuU
"""

!pip install transformers torch gradio textblob matplotlib -q

import gradio as gr
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM
from textblob import TextBlob
import matplotlib.pyplot as plt

# Load model and tokenizer
model_name = "ibm-granite/granite-3.2-2b-instruct"
tokenizer = AutoTokenizer.from_pretrained(model_name)
model = AutoModelForCausalLM.from_pretrained(
    model_name,
    torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32,
    device_map="auto" if torch.cuda.is_available() else None
)

if tokenizer.pad_token is None:
    tokenizer.pad_token = tokenizer.eos_token

# Memory to store feedback for dashboard
sentiment_log = []

# Generate AI response
def generate_response(prompt, max_length=1024):
    inputs = tokenizer(prompt, return_tensors="pt", truncation=True, max_length=512)
    if torch.cuda.is_available():
        inputs = {k: v.to(model.device) for k, v in inputs.items()}
    with torch.no_grad():
        outputs = model.generate(
            **inputs,
            max_length=max_length,
            temperature=0.7,
            do_sample=True,
            pad_token_id=tokenizer.eos_token_id
        )
    response = tokenizer.decode(outputs[0], skip_special_tokens=True)
    return response.replace(prompt, "").strip()

# City Analysis Scenario
def city_analysis(city_name):
    prompt = f"Provide a detailed analysis of {city_name} including:\n1. Crime Index and safety statistics\n2. Accident rates and traffic safety information\n3. Overall safety assessment\n\nCity: {city_name}\nAnalysis:"
    return generate_response(prompt, max_length=1000)

# Real-time Conversational AI Assistant
def citizen_interaction(query):
    prompt = f"As a government assistant, provide accurate and helpful information about the following citizen query related to public services, government policies, or civic issues:\n\nQuery: {query}\nResponse:"
    return generate_response(prompt, max_length=1000)

# Sentiment Analysis
def analyse_sentiment(text):
    blob = TextBlob(text)
    polarity = blob.sentiment.polarity
    if polarity > 0.1:
        sentiment = "Positive"
    elif polarity < -0.1:
        sentiment = "Negative"
    else:
        sentiment = "Neutral"

    sentiment_log.append(sentiment)
    return f"Sentiment: {sentiment} (Polarity: {polarity:.2f})"

# Dashboard plot
def plot_sentiment_distribution():
    if not sentiment_log:
        # Create empty plot with message
        fig, ax = plt.subplots(figsize=(8, 6))
        ax.text(0.5, 0.5, "No sentiment data available yet",
                ha='center', va='center', fontsize=14)
        ax.set_title("Citizen Sentiment Distribution")
        ax.axis('off')
        return fig

    sentiment_counts = {
        "Positive": sentiment_log.count("Positive"),
        "Neutral": sentiment_log.count("Neutral"),
        "Negative": sentiment_log.count("Negative")
    }

    fig, ax = plt.subplots(figsize=(8, 6))
    colors = ["green", "gray", "red"]
    bars = ax.bar(sentiment_counts.keys(), sentiment_counts.values(), color=colors)

    # Add value labels on bars
    for bar, count in zip(bars, sentiment_counts.values()):
        height = bar.get_height()
        ax.text(bar.get_x() + bar.get_width()/2., height + 0.1,
                f'{count}', ha='center', va='bottom')

    ax.set_title("Citizen Sentiment Distribution")
    ax.set_ylabel("Count")
    ax.set_xlabel("Sentiment")
    plt.xticks(rotation=45)
    plt.tight_layout()

    return fig

# Create Gradio interface
with gr.Blocks(title="Government AI Assistant", theme=gr.themes.Soft()) as demo:
    gr.Markdown("# 🏛️ Government AI Assistant Dashboard")
    gr.Markdown("Interactive AI-powered tools for city analysis, citizen assistance, and sentiment tracking.")

    with gr.Tab("🏙️ City Safety Analysis"):
        gr.Markdown("## Analyze City Safety Metrics")
        gr.Markdown("Enter a city name to get comprehensive safety analysis including crime statistics and accident rates.")
        with gr.Row():
            city_input = gr.Textbox(label="Enter City Name", placeholder="e.g., New York, London, Tokyo...")
        with gr.Row():
            city_output = gr.Textbox(label="Safety Analysis", lines=8)
        city_btn = gr.Button("🔍 Analyze City", variant="primary")
        city_btn.click(city_analysis, inputs=city_input, outputs=city_output)

    with gr.Tab("💬 Citizen Assistant"):
        gr.Markdown("## Government Services Assistant")
        gr.Markdown("Ask questions about government services, policies, or civic issues.")
        with gr.Row():
            query_input = gr.Textbox(label="Your Question", placeholder="Ask about public services, policies, etc...")
        with gr.Row():
            response_output = gr.Textbox(label="Government Response", lines=6)
        assistant_btn = gr.Button("📨 Get Response", variant="primary")
        assistant_btn.click(citizen_interaction, inputs=query_input, outputs=response_output)

    with gr.Tab("😊 Sentiment Analysis"):
        gr.Markdown("## Analyze Citizen Feedback Sentiment")
        gr.Markdown("Enter text to analyze the sentiment of citizen feedback.")
        with gr.Row():
            sentiment_input = gr.Textbox(label="Enter Feedback Text", placeholder="Paste citizen feedback here...")
        with gr.Row():
            sentiment_output = gr.Textbox(label="Sentiment Result")
        sentiment_btn = gr.Button("📊 Analyze Sentiment", variant="primary")
        sentiment_btn.click(analyse_sentiment, inputs=sentiment_input, outputs=sentiment_output)

    with gr.Tab("📈 Dashboard"):
        gr.Markdown("## Citizen Sentiment Dashboard")
        gr.Markdown("Visual analytics of citizen sentiment across all interactions.")
        with gr.Row():
            plot_output = gr.Plot()
        with gr.Row():
            refresh_btn = gr.Button("🔄 Refresh Dashboard", variant="secondary")
            clear_btn = gr.Button("🗑️ Clear Data", variant="secondary")
        refresh_btn.click(plot_sentiment_distribution, outputs=plot_output)

        def clear_sentiment_data():
            global sentiment_log
            sentiment_log = []
            return plot_sentiment_distribution()

        clear_btn.click(clear_sentiment_data, outputs=plot_output)

if __name__ == "__main__":
    demo.launch(share=True)